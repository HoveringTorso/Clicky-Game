{"version":3,"sources":["components/Navbar.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","score","topScore","className","href","id","Card","clickHandler","image","name","src","alt","onClick","App","state","characters","maxScore","clickListener","tileClicked","filter","tile","clicked","handleIncorrectClick","handleCorrectClick","randomizeCharacters","setState","sort","a","b","Math","random","isGuessCorrect","resetGame","i","length","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u7NAaeA,MAXf,YAAoC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACtB,OACE,yBAAKC,UAAU,iCACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,eAGA,0BAAMD,UAAU,aAAaE,GAAG,gBAAhC,UAAuDJ,EAAvD,iBAA4EC,KCOnEI,MAbf,YAAkD,IAAlCC,EAAiC,EAAjCA,aAAcF,EAAmB,EAAnBA,GAAIG,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KACvC,OACE,yBAAKN,UAAU,eACb,yBACEO,IAAKF,EACLG,IAAKF,EACLN,UAAU,sEACVS,QAAS,kBAAML,EAAaF,Q,OC8FrBQ,G,iNA9FbC,MAAQ,CACNC,WAAYA,EACZd,MAAO,EACPe,SAAU,GACVd,SAAU,G,EAIVe,cAAgB,SAAAZ,GAEd,IAAMU,EAAa,EAAKD,MAAMC,WAExBG,EAAcH,EAAWI,QAAO,SAAAC,GAAI,OAAIA,EAAKf,KAAOA,KAGrDa,EAAY,GAAGG,QAWlB,EAAKC,wBATLJ,EAAY,GAAGG,SAAU,EAEzB,EAAKE,qBAGL,EAAKC,oBAAoBT,GAEzB,EAAKU,SAAS,CAAEV,iB,EAOpBS,oBAAsB,SAAAT,GACpBA,EAAWW,MAAK,SAACC,EAAGC,GAClB,MAAO,GAAMC,KAAKC,a,EAKtBP,mBAAqB,WACnB,EAAKE,SAAS,CAAEM,gBAAgB,IAC5B,EAAKjB,MAAMb,MAAQ,EAAI,EAAKa,MAAMZ,UACpC,EAAKuB,SAAS,CAAEvB,SAAU,EAAKY,MAAMZ,SAAW,IAE9C,EAAKY,MAAMb,MAAa,EAAKa,MAAME,SACrC,EAAKS,SAAS,CACZxB,MAAO,EAAKa,MAAMb,MAAQ,K,EAUhCqB,qBAAuB,WACrB,EAAKG,SAAS,CACZM,gBAAgB,IAElB,EAAKC,a,EAIPA,UAAY,WAEV,IADA,IAAMjB,EAAa,EAAKD,MAAMC,WACrBkB,EAAI,EAAGA,EAAIlB,EAAWmB,OAAQD,IACrClB,EAAWkB,GAAGZ,SAAU,EAE1B,EAAKI,SAAS,CAAExB,MAAO,IACvB,EAAKuB,oBAAoBT,I,wEAInB,IAAD,OACP,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,CAAQF,MAAOkC,KAAKrB,MAAMb,MAAOC,SAAUiC,KAAKrB,MAAMZ,WACtD,yBAAKC,UAAU,2FACZY,EAAWqB,KAAI,gBAAG/B,EAAH,EAAGA,GAAII,EAAP,EAAOA,KAAMD,EAAb,EAAaA,MAAOa,EAApB,EAAoBA,QAApB,OACd,kBAAC,EAAD,CACEgB,IAAKhC,EACLA,GAAIA,EACJI,KAAMA,EACND,MAAOA,EACPa,QAASA,EACTd,aAAc,EAAKU,yB,GAvFfqB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c29bf06f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction NavBar({score, topScore}) {\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-primary\">\r\n      <a className=\"navbar-brand\" href=\"/\">\r\n        Clicky Game\r\n      </a>\r\n      <span className=\"text-white\" id=\"scoreCounter\">SCORE: {score} | TOP SCORE: {topScore}</span>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\n\r\nfunction Card({ clickHandler, id, image, name }) {\r\n  return (\r\n    <div className=\"card-holder\">\r\n      <img\r\n        src={image}\r\n        alt={name}\r\n        className=\"card-select grow img-thumbnail m-2 pointer img-responsive fit-image\"\r\n        onClick={() => clickHandler(id)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React, { Component } from \"react\";\nimport NavBar from \"./components/Navbar.js\";\nimport Card from \"./components/Card.js\";\n// import Score from \"./components/Score.js\";\nimport characters from \"./Characters.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = {\n    characters: characters,\n    score: 0,\n    maxScore: 12,\n    topScore: 0\n  }\n\n    // Main click listener function\n    clickListener = id => {\n      // Variable to hold the characters' state.\n      const characters = this.state.characters;\n      // Search through character tiles to find the one that matches the clicked id.\n      const tileClicked = characters.filter(tile => tile.id === id);\n  \n      // If the tile isn't clicked...\n      if (!tileClicked[0].clicked) {\n        // ...set it to now be clicked\n        tileClicked[0].clicked = true;\n        // ...call this function to register the correct guess\n        this.handleCorrectClick();\n  \n        // ... randomize character tiles\n        this.randomizeCharacters(characters);\n  \n        this.setState({ characters });\n      } else {\n        this.handleIncorrectClick();\n      }\n    };\n  \n    // Function to randomize the characters\n    randomizeCharacters = characters => {\n      characters.sort((a, b) => {\n        return 0.5 - Math.random();\n      });\n    };\n  \n    // Handler for correct guesses/clicks\n    handleCorrectClick = () => {\n      this.setState({ isGuessCorrect: true });\n      if (this.state.score + 1 > this.state.topScore) {\n        this.setState({ topScore: this.state.topScore + 1 });\n      }\n      if (this.state.score + 1 >= this.state.maxScore) {\n        this.setState({\n          score: this.state.score + 1\n        });\n      } else {\n        this.setState({\n          score: this.state.score + 1\n        });\n      }\n    };\n  \n    // Handler for incorrect guesses/clicks\n    handleIncorrectClick = () => {\n      this.setState({\n        isGuessCorrect: false\n      });\n      this.resetGame();\n    };\n  \n    // Resets the game\n    resetGame = () => {\n      const characters = this.state.characters;\n      for (let i = 0; i < characters.length; i++) {\n        characters[i].clicked = false;\n      }\n      this.setState({ score: 0 });\n      this.randomizeCharacters(characters);\n    };\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar score={this.state.score} topScore={this.state.topScore}/>\n        <div className=\"container d-flex justify-content-center main-content mx-auto padding-main flex-wrap row\">\n          {characters.map(({ id, name, image, clicked }) => (\n            <Card\n              key={id}\n              id={id}\n              name={name}\n              image={image}\n              clicked={clicked}\n              clickHandler={this.clickListener}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}